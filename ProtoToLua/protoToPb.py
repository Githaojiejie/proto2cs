# -*- coding: utf-8 -*-
#!/usr/bin/python3

import configparser
import os
import os.path
import pprint
import re

class MsgInfo(object):
	def __init__(self,msgid,msgname,comment):
		self.msgid = msgid
		self.msgname = msgname
		self.comment = comment
		
	msgid = ""
	msgname = ""
	comment = ""

class WrapFile:
	fs = None
	def __init__(self,real_file):
		self.fs = real_file
	def writelines(self,s):
		self.fs.write(s + "\n")
	def flush(self):
		self.fs.flush()
	def close(self):
		self.fs.close()

def base_proto_to_pb(proto_path,dstdir):
	os.chdir(proto_path)
	pbfileList = []
	for filename in os.listdir(proto_path):
		curfile = proto_path + filename
		if os.path.isfile(curfile):
			houzhui = curfile[curfile.rfind('.'):]
		if houzhui == '.proto':
			file = filename[:filename.rfind('.')]
			destname = dstdir + file + '.pb'
			srcname  = file + '.proto'
			
			print(srcname)
			pbfileList.append(file + '.pb')
			cmd = "protoc --descriptor_set_out " + destname + " " + srcname
			os.system(cmd)
	return pbfileList

def ParsePbfile(fileList):
	print("START GEN PbFilesDefine")
	config=configparser.ConfigParser()
	config.read("Config.ini")
	luaPath = config.get("PATH","lua")
	configFolderPath = luaPath + "Config\\"
	fileDefine = configFolderPath + "PbFilesDefine.lua"
	
	fs = WrapFile(open(fileDefine,"w+"))
	fs.writelines("--Generated By ParsePbfile Do not Edit");
	fs.writelines("local config = {");

	for name in fileList:
		fs.writelines("\t\"%s\","%(name));

	fs.writelines("}");
	fs.writelines("return config");
	fs.flush();
	fs.close();


def proto_to_pb():
	begin_path = os.getcwd()	
	config=configparser.ConfigParser()
	config.read("Config.ini")
	proto_path = config.get("PATH","protocol")
	dstdir = config.get("PATH","lua")
	dstdir = dstdir + "Proto\\"
	if not os.path.isabs(proto_path):
		proto_path = begin_path + "\\" + proto_path
	if not os.path.isabs(dstdir):
		dstdir = begin_path + "\\" + dstdir
	pbfileList =base_proto_to_pb(proto_path,dstdir)
	os.chdir(begin_path)
	ParsePbfile(pbfileList)
	
def ParseCommandProto():
	config=configparser.ConfigParser()
	config.read("Config.ini")
	proto_path = config.get("PATH","protocol")
	proto_path = proto_path + "Command.proto"

	msgInfoList = []
	protofile = open(proto_path,'r',encoding='UTF-8')
	for line in protofile.readlines():
		line = line.strip().rstrip();
		print(line)
		msgName = re.search("[a-zA-Z]+_[a-zA-Z]+",line)
		if not msgName:
			continue

		msgId = re.search("[0-9]+",line)
		splitstr = re.split(";[\s]*//",line);
		comment = ""
		if len(splitstr) > 1 :
			comment = splitstr[1]

		msgInfoList.append(MsgInfo(msgId.group(0),msgName.group(0),comment))
		#print(comment,msgId.group(0))
		#print(msgId.group(0),"=",msgName.group(0));
	return msgInfoList	

def ParseMsgIDMap(fs,msgidList):
	fs.writelines("--Generated By msgid-gen-lua Do not Edit");
	fs.writelines("local config = {");

	for _msgDef in msgidList:
		splitMsgname = _msgDef.msgname.split('_')
		fs.writelines("\t[%s] = \"%s\",--%s"% (_msgDef.msgid, "ProtoCmd."+splitMsgname[0], _msgDef.comment));

	fs.writelines("}");
	fs.writelines("return config");

	fs.flush();
	fs.close();

def ParseMsgIDDefine(fs,msgidList):
	fs.writelines("--Generated By msgid-gen-lua Do not Edit");
	fs.writelines("local config = {");

	for _msgDef in msgidList:
		fs.writelines("\t%s = %s, --%s"%( _msgDef.msgname, _msgDef.msgid,_msgDef.comment));

	fs.writelines("}");
	fs.writelines("return config");
	fs.flush();
	fs.close();

def GenMsgID():
	config=configparser.ConfigParser()
	config.read("Config.ini")
	luaPath = config.get("PATH","lua")
	msgFolderPath = luaPath + "Config\\"
	MsgIDDefine = msgFolderPath + "MsgIDDefine.lua"
	MsgIDMap = msgFolderPath + "MsgIDMap.lua"

	msgList = ParseCommandProto()
	print("START GEN MsgIDDefine")
	wf = WrapFile(open(MsgIDDefine,"w+"))
	ParseMsgIDDefine(wf,msgList)
	wf = WrapFile(open(MsgIDMap,"w+"))
	ParseMsgIDMap(wf,msgList)



proto_to_pb()
GenMsgID()
